(module
  (import "env" "log" (func $log (param i32)))
  (import "env" "getInput" (func $getInput (param i32) (result i32)))
  (import "env" "setOutput" (func $setOutput (param i32)))
  
  (export "processData" (func $processData))

  (func $processData (param $ptr i32)
    (local $len i32)
    (local $i i32)
    (local $char i32)
    (local $vowelCount i32)
    (local $consonantCount i32)
    (set_local $len (call $getInput (get_local $ptr)))
    (set_local $i (i32.const 0))
    (set_local $vowelCount (i32.const 0))
    (set_local $consonantCount (i32.const 0))

    (loop $loop
      (br_if $loop (i32.ge_s (get_local $i) (get_local $len)))
      (set_local $char (i32.load8_u (i32.add (get_local $ptr) (get_local $i))))
      (if (i32.eq (get_local $char) (i32.const 65))  ;; A
        (set_local $vowelCount (i32.add (get_local $vowelCount) (i32.const 1)))
      )
      (if (i32.eq (get_local $char) (i32.const 69))  ;; E
        (set_local $vowelCount (i32.add (get_local $vowelCount) (i32.const 1)))
      )
      (if (i32.eq (get_local $char) (i32.const 73))  ;; I
        (set_local $vowelCount (i32.add (get_local $vowelCount) (i32.const 1)))
      )
      (if (i32.eq (get_local $char) (i32.const 79))  ;; O
        (set_local $vowelCount (i32.add (get_local $vowelCount) (i32.const 1)))
      )
      (if (i32.eq (get_local $char) (i32.const 85))  ;; U
        (set_local $vowelCount (i32.add (get_local $vowelCount) (i32.const 1)))
      )
      (if (i32.ge_u (get_local $char) (i32.const 65)) 
          (if (i32.le_u (get_local $char) (i32.const 90)) 
            (set_local $consonantCount (i32.add (get_local $consonantCount) (i32.const 1)))
          )
      )
      (set_local $i (i32.add (get_local $i) (i32.const 1)))
      (br $loop)
    )
    (call $log (get_local $vowelCount))
    (call $log (get_local $consonantCount))
    (call $setOutput (get_local $ptr))
  )
)
